{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"pyquack # A simple Python sync/async duckduckgo API wrapper. Installation # By default, pyquack will be synchronous and will use the requests libary. pip install -U pyquack For async support, pip install -U pyquack[async] Quickstart # Synchronous # import pyquack client = pyquack . Client () response = client . query ( \"DuckDuckGo\" ) print ( response . results ) print ( response . definition ) For all of the available attributes on the response object, refer Models Asynchronous # import asyncio import pyquack async def main () -> None : client = pyquack . AsyncClient () response = await client . query ( \"DuckDuckGo\" ) print ( response . results ) print ( response . definition ) asyncio . run ( main ()) Contact # Feel free to raise issues or contribute on GitHub Contact me on Discord: anand#8837","title":"Home"},{"location":"#pyquack","text":"A simple Python sync/async duckduckgo API wrapper.","title":"pyquack"},{"location":"#installation","text":"By default, pyquack will be synchronous and will use the requests libary. pip install -U pyquack For async support, pip install -U pyquack[async]","title":"Installation"},{"location":"#quickstart","text":"","title":"Quickstart"},{"location":"#synchronous","text":"import pyquack client = pyquack . Client () response = client . query ( \"DuckDuckGo\" ) print ( response . results ) print ( response . definition ) For all of the available attributes on the response object, refer Models","title":"Synchronous"},{"location":"#asynchronous","text":"import asyncio import pyquack async def main () -> None : client = pyquack . AsyncClient () response = await client . query ( \"DuckDuckGo\" ) print ( response . results ) print ( response . definition ) asyncio . run ( main ())","title":"Asynchronous"},{"location":"#contact","text":"Feel free to raise issues or contribute on GitHub Contact me on Discord: anand#8837","title":"Contact"},{"location":"api_reference/","text":"API Reference # pyquack.sync.Client # A synchronous API client which uses the requests module. __init__ ( self , * , safesearch = True , html = False , meanings = True ) special # Initialize the client. Parameters: Name Type Description Default safesearch bool Whether safesearch should be enabled. True html bool Whether there should be HTML in the API response. False meanings bool Whether to include disambiguations. True query ( self , _query ) # Run a query against the DuckDuckGo API. Parameters: Name Type Description Default _query str The query to be searched. required Returns: Type Description QueryResult QueryResult object containing the parsed API response. pyquack._async.AsyncClient # An asynchronous API client which uses the aiohttp module. __init__ ( self , * , safesearch = True , html = False , meanings = True ) special # Initialize the client. Parameters: Name Type Description Default safesearch bool Whether safesearch should be enabled. True html bool Whether there should be HTML in the API response. False meanings bool Whether to include disambiguations. True query ( self , _query ) async # Run a query against the DuckDuckGo API. Parameters: Name Type Description Default _query str The query to be searched. required Returns: Type Description QueryResult pyquack.Response pyquack . sync . query ( _query , * , safesearch = True , html = False , meanings = True ) # Function to make a one-off search query. Warning If you expect to be making many queries, use pyquack.Client instead. pyquack.Client uses requests.Session internally, giving improved performance for multiple queries. Parameters: Name Type Description Default _query str The query to be searched. required Returns: Type Description QueryResult QueryResult object containing the parsed API response.","title":"API Reference"},{"location":"api_reference/#api-reference","text":"","title":"API Reference"},{"location":"api_reference/#pyquack.sync.Client","text":"A synchronous API client which uses the requests module.","title":"Client"},{"location":"api_reference/#pyquack.sync.Client.__init__","text":"Initialize the client. Parameters: Name Type Description Default safesearch bool Whether safesearch should be enabled. True html bool Whether there should be HTML in the API response. False meanings bool Whether to include disambiguations. True","title":"__init__()"},{"location":"api_reference/#pyquack.sync.Client.query","text":"Run a query against the DuckDuckGo API. Parameters: Name Type Description Default _query str The query to be searched. required Returns: Type Description QueryResult QueryResult object containing the parsed API response.","title":"query()"},{"location":"api_reference/#pyquack._async.AsyncClient","text":"An asynchronous API client which uses the aiohttp module.","title":"AsyncClient"},{"location":"api_reference/#pyquack._async.AsyncClient.__init__","text":"Initialize the client. Parameters: Name Type Description Default safesearch bool Whether safesearch should be enabled. True html bool Whether there should be HTML in the API response. False meanings bool Whether to include disambiguations. True","title":"__init__()"},{"location":"api_reference/#pyquack._async.AsyncClient.query","text":"Run a query against the DuckDuckGo API. Parameters: Name Type Description Default _query str The query to be searched. required Returns: Type Description QueryResult pyquack.Response","title":"query()"},{"location":"api_reference/#pyquack.sync.query","text":"Function to make a one-off search query. Warning If you expect to be making many queries, use pyquack.Client instead. pyquack.Client uses requests.Session internally, giving improved performance for multiple queries. Parameters: Name Type Description Default _query str The query to be searched. required Returns: Type Description QueryResult QueryResult object containing the parsed API response.","title":"query()"},{"location":"models/","text":"Models # All models are based on the raw API response itself sent. Refer DuckDuckGo API page for more details. pyquack.response.QueryResult # Name Type abstract pyquack.response.Abstract answer pyquack.response.Answer definition pyquack.response.Definition related_topics List[pyquack.response.RelatedTopic] results List[pyquack.response.Result] type pyquack.response.ResultType redirect Optional[str] pyquack.response.Abstract # Name Description html topic summary (can contain HTML, e.g. italics) text topic summary (with no HTML) source name of Abstract source url deep link to expanded topic page image_url link to image that goes with Abstract heading name of topic pyquack.response.Definition # Name Description html topic summary (can contain HTML, e.g. italics) text topic summary (with no HTML) source name of Abstract source url deep link to expanded topic page pyquack.response.Answer # Name Description text instant answer type type of answer pyquack.response.Icon # Name Description url URL to the image height Height of image in pixels width Width of image in pixels pyquack.response.Result # Name Description first_url first URL in the result icon pyquack.response.Icon text text from first URL Note pyquack.response.RelatedTopic has the same structure as pyquack.response.Result enum pyquack.response.ResultType # Name Value ARTICLE \"A\" DISAMBIGUATION \"D\" CATEGORY \"C\" NAME \"N\" EXCLUSIVE \"E\" NOTHING \"\"","title":"Models"},{"location":"models/#models","text":"All models are based on the raw API response itself sent. Refer DuckDuckGo API page for more details.","title":"Models"},{"location":"models/#pyquackresponsequeryresult","text":"Name Type abstract pyquack.response.Abstract answer pyquack.response.Answer definition pyquack.response.Definition related_topics List[pyquack.response.RelatedTopic] results List[pyquack.response.Result] type pyquack.response.ResultType redirect Optional[str]","title":"pyquack.response.QueryResult"},{"location":"models/#pyquackresponseabstract","text":"Name Description html topic summary (can contain HTML, e.g. italics) text topic summary (with no HTML) source name of Abstract source url deep link to expanded topic page image_url link to image that goes with Abstract heading name of topic","title":"pyquack.response.Abstract"},{"location":"models/#pyquackresponsedefinition","text":"Name Description html topic summary (can contain HTML, e.g. italics) text topic summary (with no HTML) source name of Abstract source url deep link to expanded topic page","title":"pyquack.response.Definition"},{"location":"models/#pyquackresponseanswer","text":"Name Description text instant answer type type of answer","title":"pyquack.response.Answer"},{"location":"models/#pyquackresponseicon","text":"Name Description url URL to the image height Height of image in pixels width Width of image in pixels","title":"pyquack.response.Icon"},{"location":"models/#pyquackresponseresult","text":"Name Description first_url first URL in the result icon pyquack.response.Icon text text from first URL Note pyquack.response.RelatedTopic has the same structure as pyquack.response.Result","title":"pyquack.response.Result"},{"location":"models/#enum-pyquackresponseresulttype","text":"Name Value ARTICLE \"A\" DISAMBIGUATION \"D\" CATEGORY \"C\" NAME \"N\" EXCLUSIVE \"E\" NOTHING \"\"","title":"enum pyquack.response.ResultType"}]}